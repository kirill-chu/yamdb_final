name: yamdb workflow

on: push
  branches: [ '*' ]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.7

    - name: Install dependies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r api_yamdb/requirements.txt
    
    - name: Test  with flake8
      run: python -m flake8
    
    - name: Test with pytest
      run: pytest
    
    - name: Test  with django tests
      run: python api_yamdb/manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2        
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./api_yamdb
          push: true
          tags: kirillchu/yamdb_sprint13:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.CLOUD_HOST_IP }}
        username: ${{ secrets.CLOUD_USER }}
        key: ${{ secrets.SSH_TO_YA_CLOUD }}
        passphrase: ${{ secrets.CLOUD_PHRASE }}
        script: |
          sudo docker compose stop
          sudo docker compose rm web
          sudo docker pull kirillchu/yamdb_sprint13:latest
          touch .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} > .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          sudo docker compose up -d

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_ID }}
        token: ${{ secrets.BOT_NOTIFIER }}
        message: ${{ github.workflow }} успешно выполнен!